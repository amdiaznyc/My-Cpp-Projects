Section 4.10--Fig. 4.15
Formulating Algorithms: Nested Control Statements

Consider the following problem statement:
A college offers a course that prepares students for the state licensing exam for real estate brokers. Last year, ten of the students who completed this course took the exam. The college wants to know how well its students did on the exam. You’ve been asked to write a program to summarize the results. You’ve been given a list of these 10 students. Next to each name is written a 1 if the student passed the exam or a 2 if the student failed.
Your program should analyze the results of the exam as follows:
1. Input each test result (i.e., a 1 or a 2). Display the prompting message “Enter result” each time the program requests another test result.
2. Count the number of test results of each type.
3. Display a summary of the test results indicating the number of students who passed and the number who failed.
4. If more than eight students passed the exam, print the message “Bonus to instructor!”

Pseudocode:
1). Write a program summarizing the test results.
We're been given a list of 10 students, with 1 for passing and 2 for failing (input).
Prompt user to input each result. (We will need somewhere to store this.)
    -variable to hold students_passed and students_failed   
    -We need to prompt the user for each result. (This sounds like input through repetition.)
        --Prompt the user.
        -Use a loop to repeat through all 10 results.
2). Count the number of test results of each type. (We need a counter for each type (pass or fail).
    -Store each result to pass or fail
3). Display a summary of the text results indicating the number of students who passed and the number who failed. (This sounds like output.)
    -Output results of Student who pass and students who failed.
        -Return the vale of variables students_passed and students_failed
4). If more that 8 students passed, print the message "Bonus to the instructor!". (This sounds like output based on a conditional. ie.--If more than 8 students passed.)
    --if (conditional)
        --if students_passed > 8;
        --then output "Bonus to the instructor!"
        --otherwise do nothing

Top-down, stepwise refinement:
First, a pseudocode representation ot the top (overall objective):
    "Analyze exam results and decide whether tuition should be raised."

First refinement:
    "Initialize variable.
    Input the 10 exam results, and count passes and failures.
    Print a summary of the exam results and decide if tuition should be raised.

Seconde refinement:
    Initialize variable.
        Initialize passes to zero.
        Initialize failures to zero.
        Initialize student counter to one.

    Input the 10 exam results, and count passes and failures.
        While the student counter is less than or equal to 10
            Prompt the user to enter the next exam result
            Input the next exam result

            If the student passed
                Add one to passes
            Else
                Add one to failures

            Add one to student counter

    Print a summary of the exam results and decide if tuition should be raised.
        Print the number of passes
        Print the number of failures

        If more than eight students passed
            Print "Bonus to the instructor!"
